import { analyzeCompanyWithOpenAI } from './enhanced-openai';

export interface ComparisonCriteria {
  name: string;
  company_score: number;
  leader_score: number;
  gap: number;
  improvements: string[];
  priority: 'high' | 'medium' | 'low';
}

export interface CompetitiveComparison {
  company_name: string;
  company_data: {
    has_gmn_profile: boolean;
    verification_status: string;
    rating: number;
    total_reviews: number;
    nap_consistency_score: number;
    has_products: boolean;
    images_count: number;
    has_geotags: boolean;
    posts_per_week: number;
    review_response_rate: number;
    seo_score: number;
    engagement_score: number;
    overall_score: number;
    email?: string;
    phone?: string;
    whatsapp?: string;
    address?: string;
    website?: string;
    gmn_url?: string;
  };
  leader_name: string;
  gmn_position?: string;
  leader_data: {
    has_gmn_profile: boolean;
    verification_status: string;
    rating: number;
    total_reviews: number;
    nap_consistency_score: number;
    has_products: boolean;
    images_count: number;
    has_geotags: boolean;
    posts_per_week: number;
    review_response_rate: number;
    seo_score: number;
    engagement_score: number;
    overall_score: number;
    email?: string;
    phone?: string;
    whatsapp?: string;
    address?: string;
  };
  criteria_comparison: ComparisonCriteria[];
  overall_gap: number;
  strategic_recommendations: string[];
  quick_wins: string[];
  long_term_goals: string[];
  executive_summary: string;
  improvement_roadmap: string[];
  summary_gap_analysis: string;
  criteria_gap_analysis: string;
}

export async function performCompetitiveComparison(
  companyName: string,
  city: string,
  segment: string
): Promise<CompetitiveComparison> {
  console.log(`üîç Buscando l√≠der do segmento "${segment}" em "${city}"...`);

  const leaderPrompt = `Encontre a empresa l√≠der do segmento "${segment}" em "${city}" no Google Meu Neg√≥cio.

Retorne APENAS um JSON com o nome da empresa l√≠der:
{
  "leader_name": "Nome Completo da Empresa L√≠der"
}`;

  const leaderResponse = await analyzeCompanyWithOpenAI(leaderPrompt, '');
  const leaderData = JSON.parse(leaderResponse);
  const leaderName = leaderData.leader_name;

  console.log(`üëë L√≠der identificado: ${leaderName}`);
  console.log(`üìä Analisando ${companyName}...`);

  const companyPrompt = `Voc√™ √© analista de GMN. Crie uma an√°lise REALISTA e VARIADA de "${companyName}" em "${city}", segmento "${segment}".

IMPORTANTE - DADOS DEVEM SER DIFERENTES E REALISTAS:
- Esta √© a empresa ANALISADA (normalmente tem scores MENORES que o l√≠der)
- Rating: varie entre 3.5 a 4.5 (use decimais diferentes como 3.8, 4.2)
- Reviews: varie entre 30-180 (n√∫meros ESPEC√çFICOS, n√£o redondos)
- Images: varie entre 15-65
- Overall score: entre 50-75 para empresa analisada
- N√ÉO invente email/telefone - use null
- Endere√ßo: apenas cidade e bairro estimado

Retorne APENAS JSON:
{
  "has_gmn_profile": true,
  "verification_status": "Verificado",
  "rating": 4.1,
  "total_reviews": 87,
  "nap_consistency_score": 65,
  "has_products": true,
  "images_count": 32,
  "has_geotags": true,
  "posts_per_week": 1,
  "review_response_rate": 55,
  "seo_score": 60,
  "engagement_score": 58,
  "overall_score": 62,
  "email": null,
  "phone": null,
  "whatsapp": null,
  "address": "${city}, Centro",
  "gmn_url": "https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(companyName + ' ' + city)}",
  "website": null,
  "instagram": null,
  "facebook": null,
  "waze": false,
  "uber": false,
  "99": false,
  "ifood": false
}`;

  const companyAnalysis = await analyzeCompanyWithOpenAI(companyPrompt, '');
  const companyData = JSON.parse(companyAnalysis);

  console.log(`üìä Analisando ${leaderName} (l√≠der)...`);

  const leaderAnalysisPrompt = `Voc√™ √© analista de GMN. Crie uma an√°lise REALISTA do L√çDER "${leaderName}" em "${city}", segmento "${segment}".

IMPORTANTE - EMPRESA L√çDER TEM MELHORES SCORES:
- Esta √© a empresa L√çDER (deve ter scores MAIORES)
- Rating: entre 4.4 a 4.9 (use decimais espec√≠ficos como 4.7, 4.8)
- Reviews: entre 120-350 (n√∫meros ESPEC√çFICOS e DIFERENTES da empresa analisada)
- Images: entre 45-95 (DIFERENTE da outra empresa)
- Overall score: entre 75-88 para l√≠der
- N√ÉO invente email/telefone - use null
- Dados DEVEM ser DIFERENTES dos da empresa analisada

Retorne APENAS JSON com dados DIFERENTES:
{
  "has_gmn_profile": true,
  "verification_status": "Verificado",
  "rating": 4.6,
  "total_reviews": 218,
  "nap_consistency_score": 88,
  "has_products": true,
  "images_count": 67,
  "has_geotags": true,
  "posts_per_week": 3,
  "review_response_rate": 92,
  "seo_score": 85,
  "engagement_score": 82,
  "overall_score": 81,
  "email": null,
  "phone": null,
  "whatsapp": null,
  "address": "${city}, regi√£o nobre",
  "gmn_url": "https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(leaderName + ' ' + city)}",
  "website": null,
  "instagram": null,
  "facebook": null,
  "waze": true,
  "uber": true,
  "99": true,
  "ifood": true
}`;

  const leaderAnalysis = await analyzeCompanyWithOpenAI(leaderAnalysisPrompt, '');
  const leaderDataAnalysis = JSON.parse(leaderAnalysis);

  console.log(`‚öñÔ∏è Gerando compara√ß√£o detalhada...`);

  const comparisonPrompt = `Compare "${companyName}" (empresa) com "${leaderName}" (l√≠der do segmento) em 12 crit√©rios.

Dados da Empresa:
${JSON.stringify(companyData, null, 2)}

Dados do L√≠der:
${JSON.stringify(leaderDataAnalysis, null, 2)}

Retorne um JSON com compara√ß√£o detalhada em 12 crit√©rios:
{
  "criteria": [
    {
      "name": "Perfil Verificado",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2", "sugest√£o 3"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Avalia√ß√µes e Nota",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Consist√™ncia NAP",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Produtos/Servi√ßos",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Galeria de Imagens",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Geolocaliza√ß√£o",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Frequ√™ncia de Posts",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Resposta a Avalia√ß√µes",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Otimiza√ß√£o SEO Local",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Engajamento do P√∫blico",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Hor√°rio de Funcionamento",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    },
    {
      "name": "Atributos e Facilidades",
      "company_score": number (0-10),
      "leader_score": number (0-10),
      "gap": number,
      "improvements": ["sugest√£o 1", "sugest√£o 2"],
      "priority": "high" | "medium" | "low"
    }
  ],
  "strategic_recommendations": [
    "Recomenda√ß√£o estrat√©gica detalhada 1 (m√≠nimo 50 caracteres)",
    "Recomenda√ß√£o estrat√©gica detalhada 2 (m√≠nimo 50 caracteres)",
    "Recomenda√ß√£o estrat√©gica detalhada 3 (m√≠nimo 50 caracteres)",
    "Recomenda√ß√£o estrat√©gica detalhada 4 (m√≠nimo 50 caracteres)",
    "Recomenda√ß√£o estrat√©gica detalhada 5 (m√≠nimo 50 caracteres)"
  ],
  "quick_wins": [
    "Vit√≥ria r√°pida detalhada 1 que pode ser implementada em 30 dias",
    "Vit√≥ria r√°pida detalhada 2 que pode ser implementada em 30 dias",
    "Vit√≥ria r√°pida detalhada 3 que pode ser implementada em 30 dias",
    "Vit√≥ria r√°pida detalhada 4 que pode ser implementada em 30 dias",
    "Vit√≥ria r√°pida detalhada 5 que pode ser implementada em 30 dias"
  ],
  "long_term_goals": [
    "Meta de longo prazo detalhada 1 (90+ dias) com descri√ß√£o completa",
    "Meta de longo prazo detalhada 2 (90+ dias) com descri√ß√£o completa",
    "Meta de longo prazo detalhada 3 (90+ dias) com descri√ß√£o completa",
    "Meta de longo prazo detalhada 4 (90+ dias) com descri√ß√£o completa"
  ]
}

IMPORTANTE: PREENCHA TODOS OS ARRAYS ACIMA COM CONTE√öDO REAL E DETALHADO!`;

  const comparisonResponse = await analyzeCompanyWithOpenAI(comparisonPrompt, '');
  console.log('üìã Resposta da API (comparison):', comparisonResponse);

  let comparisonData;
  try {
    comparisonData = JSON.parse(comparisonResponse);
    console.log('‚úÖ Crit√©rios parseados:', comparisonData.criteria?.length || 0);
  } catch (parseError) {
    console.error('‚ùå Erro ao fazer parse da resposta:', parseError);
    throw new Error('A API retornou dados inv√°lidos para a compara√ß√£o.');
  }

  console.log(`üìù Gerando s√≠ntese executiva...`);

  const summaryPrompt = `Crie uma S√çNTESE EXECUTIVA comparando "${companyName}" com "${leaderName}" (l√≠der do segmento).

Dados da Empresa:
${JSON.stringify(companyData, null, 2)}

Dados do L√≠der:
${JSON.stringify(leaderDataAnalysis, null, 2)}

Diferen√ßa de Score: ${companyData.overall_score - leaderDataAnalysis.overall_score}

Crie uma s√≠ntese com M√ÅXIMO 1000 caracteres destacando:
- Posi√ß√£o atual da empresa em rela√ß√£o ao l√≠der
- Principais pontos fortes e fracos
- Gap mais cr√≠tico
- Perspectiva geral de melhoria

Retorne apenas o texto da s√≠ntese, sem JSON.`;

  const executiveSummary = await analyzeCompanyWithOpenAI(summaryPrompt, '');

  console.log(`üó∫Ô∏è Gerando roadmap de melhorias...`);

  const roadmapPrompt = `Crie um ROADMAP DID√ÅTICO (passo a passo) das melhorias que podem levar "${companyName}" ao TOP 3 do segmento.

Crit√©rios analisados:
${JSON.stringify(comparisonData.criteria, null, 2)}

Crie uma lista de 8 a 12 passos em ordem de IMPORT√ÇNCIA DECRESCENTE (do mais importante ao menos importante).
Cada passo deve ser claro, objetivo e acion√°vel.

Retorne APENAS um JSON:
{
  "roadmap": ["Passo 1: descri√ß√£o detalhada", "Passo 2: descri√ß√£o detalhada", ...]
}`;

  const roadmapResponse = await analyzeCompanyWithOpenAI(roadmapPrompt, '');
  const roadmapData = JSON.parse(roadmapResponse);

  console.log(`üìã Gerando an√°lises de gap...`);

  const summaryGapPrompt = `Crie um coment√°rio objetivo explicando o que faz "${companyName}" estar atr√°s de "${leaderName}".

Dados comparativos:
Empresa: Score ${companyData.overall_score}/100, ${companyData.rating} estrelas, ${companyData.total_reviews} avalia√ß√µes
L√≠der: Score ${leaderDataAnalysis.overall_score}/100, ${leaderDataAnalysis.rating} estrelas, ${leaderDataAnalysis.total_reviews} avalia√ß√µes

Crie um coment√°rio com M√ÅXIMO 1000 caracteres explicando claramente os principais fatores que fazem a empresa estar atr√°s.
Retorne apenas o texto do coment√°rio, sem JSON.`;

  const summaryGapAnalysis = await analyzeCompanyWithOpenAI(summaryGapPrompt, '');

  const criteriaGapPrompt = `Analise os crit√©rios de compara√ß√£o e explique objetivamente o que faz "${companyName}" estar atr√°s de "${leaderName}".

Crit√©rios:
${JSON.stringify(comparisonData.criteria, null, 2)}

Crie um coment√°rio com M√ÅXIMO 1000 caracteres destacando os crit√©rios mais cr√≠ticos e seu impacto.
Retorne apenas o texto do coment√°rio, sem JSON.`;

  const criteriaGapAnalysis = await analyzeCompanyWithOpenAI(criteriaGapPrompt, '');

  const overallGap = companyData.overall_score - leaderDataAnalysis.overall_score;

  // Mapear criteria para o formato correto - manter scores 0-10
  const criteriaComparison = (comparisonData.criteria || []).map((criterion: any) => ({
    name: criterion.name,
    company_score: Number(criterion.company_score) || 0,
    leader_score: Number(criterion.leader_score) || 0,
    gap: Number(criterion.gap) || (Number(criterion.leader_score) - Number(criterion.company_score)) || 0,
    improvements: Array.isArray(criterion.improvements) ? criterion.improvements : [],
    priority: criterion.priority || 'medium'
  }));

  // Valida√ß√£o: se n√£o houver crit√©rios, retornar erro
  if (!criteriaComparison || criteriaComparison.length === 0) {
    throw new Error('N√£o foi poss√≠vel obter crit√©rios de compara√ß√£o. A API pode n√£o ter retornado dados v√°lidos.');
  }

  console.log(`‚úÖ Compara√ß√£o conclu√≠da com ${criteriaComparison.length} crit√©rios`);

  // Gerar posi√ß√£o estimada no GMN baseada no score
  let gmnPosition = '';
  if (companyData.overall_score >= 80) {
    gmnPosition = '1¬∫-3¬∫ posi√ß√£o';
  } else if (companyData.overall_score >= 65) {
    gmnPosition = '4¬∫-7¬∫ posi√ß√£o';
  } else if (companyData.overall_score >= 50) {
    gmnPosition = '8¬∫-15¬∫ posi√ß√£o';
  } else {
    gmnPosition = 'Abaixo do top 15';
  }

  return {
    company_name: companyName,
    company_data: {
      ...companyData,
      website: `https://www.${companyName.toLowerCase().replace(/\s+/g, '')}.com.br`,
      gmn_url: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(companyName + ' ' + city)}`
    },
    leader_name: leaderName,
    leader_data: leaderDataAnalysis,
    gmn_position: gmnPosition,
    criteria_comparison: criteriaComparison,
    overall_gap: Math.abs(overallGap),
    strategic_recommendations: comparisonData.strategic_recommendations || [],
    quick_wins: comparisonData.quick_wins || [],
    long_term_goals: comparisonData.long_term_goals || [],
    executive_summary: executiveSummary,
    improvement_roadmap: roadmapData.roadmap || [],
    summary_gap_analysis: summaryGapAnalysis,
    criteria_gap_analysis: criteriaGapAnalysis,
  };
}
